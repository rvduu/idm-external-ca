---
# Now start configuring the host
- hosts: idm

  tasks:
  # Setup the Root CA 
  # Based on https://jamielinux.com/docs/openssl-certificate-authority/
  # but only a single level Root CA where the IPA CA cert will be signed with CA:true

  - name: Create Root CA directory
    file: name={{ item }} state=directory mode=0700 owner=root group=root
    with_items: 
      - /root/newca
      - /root/newca/certs
      - /root/newca/crl
      - /root/newca/csr
      - /root/newca/newcerts
      - /root/newca/private

  - name: Create index.txt
    copy: content="" dest=/root/newca/index.txt force=no owner=root group=root mode=0640

  - name: Create serial
    shell: echo 1000 > serial
    args:
      chdir: /root/newca
      creates: serial
  
  - name: Download openssl.cnf
    uri: 
      url: https://jamielinux.com/docs/openssl-certificate-authority/_downloads/root-config.txt
      dest: /root/newca/openssl.cnf
      creates: /root/newca/openssl.cnf

  - name: Change default policy for the Root CA (this is only a 1 level CA)
    lineinfile:
      path: /root/newca/openssl.cnf
      regexp: ^policy.*= policy_strict
      line: policy            = policy_loose
      state: present

  - name: Change default dir for new CA
    lineinfile:
      path: /root/newca/openssl.cnf
      regexp: ^dir.*= /root/ca
      line: dir               = /root/newca
      state: present

  - name: Create password file
    shell: 
      cmd: echo "{{ rootca_keypassword }}" > /root/newca/private/password.txt
    args:
      creates: /root/newca/private/password.txt

  - name: Update permissions of /root/newca/private/password.txt
    file: path=/root/newca/private/password.txt mode=0400


  - name: Create Root CA key file
    command: openssl genrsa -out private/ca.key.pem 4096 -passout file:/root/newca/private/password.txt
    args:
      chdir: /root/newca
      creates: /root/newca/private/ca.key.pem

  - name: Update permission of /root/newca/private/ca.key.pem
    file: path=/root/newca/private/ca.key.pem mode=0400

  - name: Create Root CA certificate
    shell:
      cmd: |
        openssl req -config openssl.cnf -key private/ca.key.pem \
          -new -x509 -days 7300 -sha256 -extensions v3_ca \
          -passin file:/root/newca/private/password.txt \
          -out certs/ca.cert.pem <<-EOF
        {{ rootca_country }}
        {{ rootca_state }}
        {{ rootca_locality }}
        {{ rootca_orgname }}
        {{ rootca_ouname }}
        New {{ rootca_cn }}
        {{ rootca_email }}
        EOF
    args:
      chdir: /root/newca
      creates: /root/newca/certs/ca.cert.pem

  - name: Update permissions of /root/newca/cert/ca.cert.pem
    file: path=/root/newca/certs/ca.cert.pem mode=0444

  - name: Generate csr to request a new cert signed by the new CA
    command: ipa-cacert-manage renew
    args:
      creates: /var/lib/ipa/ca.csr

  - name: Copy ca.csr to the new RootCa dir for signing
    command: cp /var/lib/ipa/ca.csr /root/newca/csr/ipa.csr
    args:
      creates: /root/newca/csr/ipa.csr

  - name: Sign the ipa.csr
    shell:
      cmd: |
        openssl ca -config openssl.cnf \
          -extensions v3_intermediate_ca \
          -days 7300 -notext -md sha256 \
          -passin file:/root/newca/private/password.txt \
          -in csr/ipa.csr -out certs/ipa.crt <<-EOF
        y
        y
        EOF
    args:
      chdir: /root/newca
      creates: /root/newca/certs/ipa.crt

  - name: Update permissions of /root/newca/certs/ipa.crt
    file: path=/root/newca/certs/ipa.crt mode=0444

  - name: Import new ipa.crt
    command: >
      ipa-cacert-manage renew
        --external-cert-file=/root/newca/certs/ca.cert.pem
        --external-cert-file=/root/newca/certs/ipa.crt 
        -p {{ idm_dmpassword}}
        -v

  - name: Redeploy new CA chain
    command: ipa-certupdate
